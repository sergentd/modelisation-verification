==============================================================================
./src/adt/boolean.lua
==============================================================================
   16 local Adt     = require "adt"
   16 local Boolean = Adt.Sort "bool"

   16 Boolean.True    = {}
   16 Boolean.False   = {}
   16 Boolean.Equals  = { Boolean, Boolean }
   16 Boolean.Not     = { Boolean }
   16 Boolean.And     = { Boolean, Boolean }
   16 Boolean.Or      = { Boolean, Boolean }
   16 Boolean.Xor     = { Boolean, Boolean }
   16 Boolean.Implies = { Boolean, Boolean }

   16 Boolean.generators { Boolean.True, Boolean.False }

      -- Equals
   32 Boolean [Adt.axioms].true_equals_true = Adt.axiom {
   16   Boolean.Equals { Boolean.True {}, Boolean.True {} },
   16   Boolean.True {},
   32 }

   32 Boolean [Adt.axioms].true_equals_false = Adt.axiom {
   16   Boolean.Equals { Boolean.True {}, Boolean.False {} },
   16   Boolean.False {},
   32 }

   32 Boolean [Adt.axioms].false_equals_true = Adt.axiom {
   16   Boolean.Equals { Boolean.False {}, Boolean.True {} },
   16   Boolean.False {},
   32 }

   32 Boolean [Adt.axioms].false_equals_false = Adt.axiom {
   16   Boolean.Equals { Boolean.False {}, Boolean.False {} },
   16   Boolean.True {},
   32 }

      -- Not
   32 Boolean [Adt.axioms].not_true = Adt.axiom {
   16   Boolean.Not { Boolean.True {} },
   16   Boolean.False {}
   32 }
   32 Boolean [Adt.axioms].not_false = Adt.axiom {
   16   Boolean.Not { Boolean.False {} },
   16   Boolean.True {}
   32 }

      -- And
   32 Boolean [Adt.axioms].x_and_y = Adt.axiom {
   16   Boolean.And { Boolean._x, Boolean._y },
   16   Boolean.And { Boolean._y, Boolean._x },
   32 }

   32 Boolean [Adt.axioms].true_and_v = Adt.axiom {
   16   Boolean.And { Boolean.True {}, Boolean._v },
        Boolean._v,
   32 }

   32 Boolean [Adt.axioms].false_and_v = Adt.axiom {
   16   Boolean.And { Boolean.False {}, Boolean._v },
   16   Boolean.False {},
   32 }

      -- Or
   32 Boolean [Adt.axioms].x_or_y = Adt.axiom {
   16   Boolean.Or { Boolean._x, Boolean._y },
   16   Boolean.Or { Boolean._y, Boolean._x },
   32 }

   32 Boolean [Adt.axioms].true_or_v = Adt.axiom {
   16   Boolean.Or { Boolean.True {}, Boolean._v },
   16   Boolean.True {},
   32 }

   32 Boolean [Adt.axioms].false_or_v = Adt.axiom {
   16   Boolean.Or { Boolean.False {}, Boolean._v },
        Boolean._v,
   32 }

      -- Xor
   32 Boolean [Adt.axioms].x_xor_y = Adt.axiom {
   16   Boolean.Xor { Boolean._x, Boolean._y },
   32   Boolean.And { Boolean.Or { Boolean._x, Boolean._y },
   16                 Boolean.Not { Boolean.And { Boolean._x, Boolean._y } } },
   32 }

      -- Implies
   32 Boolean [Adt.axioms].true_implies_true = Adt.axiom {
   16   Boolean.Implies { Boolean.True {}, Boolean.True {} },
   16   Boolean.True {},
   32 }

   32 Boolean [Adt.axioms].true_implies_false = Adt.axiom {
   16   Boolean.Implies { Boolean.True {}, Boolean.False {} },
   16   Boolean.False {}
   32 }

   32 Boolean [Adt.axioms].false_implies_v = Adt.axiom {
   16   Boolean.Implies { Boolean.False {}, Boolean._v },
   16   Boolean.True {},
   32 }

      -- Equal
   32 Boolean[Adt.axioms].eq_true_true = Adt.axiom {
   16   Boolean.Equals {Boolean.True {}, Boolean.True {}},
   16   Boolean.True {}
   32 }
   32 Boolean[Adt.axioms].eq_true_false = Adt.axiom {
   16   Boolean.Equals {Boolean.True {}, Boolean.False {}},
   16   Boolean.False {}
   32 }
   32 Boolean[Adt.axioms].eq_x_y = Adt.axiom {
   16   Boolean.Equals {Boolean._x, Boolean._y},
   16   Boolean.Equals {Boolean._y, Boolean._x}
   32 }

      -- And
   32 Boolean[Adt.axioms].and_true_x = Adt.axiom {
   16   Boolean.And { Boolean.True {}, Boolean._x },
        Boolean._x
   32 }
   32 Boolean[Adt.axioms].and_false_x = Adt.axiom {
   16   Boolean.And { Boolean.False {}, Boolean._x },
   16   Boolean.False {}
   32 }
   32 Boolean[Adt.axioms].and_x_y = Adt.axiom {
   16   Boolean.And { Boolean._x, Boolean._y },
   16   Boolean.And { Boolean._y, Boolean._x }
   32 }

      -- Or
   32 Boolean[Adt.axioms].or_true_x = Adt.axiom {
   16   Boolean.Or { Boolean.True {}, Boolean._x },
   16   Boolean.True {}
   32 }
   32 Boolean[Adt.axioms].or_false_x = Adt.axiom {
   16   Boolean.Or { Boolean.False {}, Boolean._x },
        Boolean._x
   32 }
   32 Boolean[Adt.axioms].or_x_y = Adt.axiom {
   16   Boolean.Or { Boolean._x, Boolean._y },
   16   Boolean.Or { Boolean._y, Boolean._x}
   32 }

      -- Xor
   32 Boolean[Adt.axioms].xor_true_x = Adt.axiom {
   16   Boolean.Xor {Boolean.True {}, Boolean._x },
   16   Boolean.Not {Boolean._x}
   32 }
   32 Boolean[Adt.axioms].xor_false_x = Adt.axiom {
   16   Boolean.Xor {Boolean.False {}, Boolean._x },
        Boolean._x
   32 }
   32 Boolean[Adt.axioms].or_x_y = Adt.axiom {
   16   Boolean.Xor { Boolean._x, Boolean._y },
   16   Boolean.Xor { Boolean._y, Boolean._x}
   32 }

      -- Implies

   16 return Boolean

==============================================================================
./src/adt/init.lua
==============================================================================
   20 local Fun  = require "fun"

   22 local Sort      = setmetatable ({}, { __tostring = function () return "Sort"      end })
   20 local Variable  = setmetatable ({}, { __tostring = function () return "Variable"  end })
   23 local Operation = setmetatable ({}, { __tostring = function () return "Operation" end })
   20 local Axiom     = setmetatable ({}, { __tostring = function () return "Axiom"     end })
   20 local Term      = setmetatable ({}, { __tostring = function () return "Term"      end })

   20 local Generator = {}
   20 local Name      = {}
   20 local Axioms    = {}

      -- ## Sort

   20 Sort.__index = Sort

   20 getmetatable (Sort).__call = function (_, name)
  272   return setmetatable ({
  136     [Name  ] = name,
  136     [Axioms] = {},
  272   }, Sort)
      end

   20 function Sort.__tostring (sort)
 2670   return tostring (sort [Name])
      end

   20 function Sort.generators (t)
   56   assert (type (t) == "table",
   28           "parameter must be a table of generators")
   56   Fun.fromtable (t)
   28     : each (function (x)
  112               assert (getmetatable (x) == Operation,
   56                       "parameters must be operations")
                  end)
   56   Fun.fromtable (t)
   84     : each (function (x) x [Generator] = true end)
      end

      -- ## Variable

   20 Variable.__index = Variable

   20 getmetatable (Variable).__call = function (_, t)
  230   assert (type (t) == "table")
  460   local result = setmetatable ({
  230     [Name] = t [Name],
  230     [Sort] = t [Sort],
  230   }, Variable)
  230   return result
      end

   20 function Variable.__tostring (variable)
  136   return tostring (variable [Name]) .. ": " .. tostring (variable [Sort])
      end

      -- ## Operation

   20 function Sort.__index (sort, key)
  160   if rawget (Sort, key)
  160   or (type (key) == "string" and key:match "^__") then
   32     return rawget (Sort, key)
  128   elseif key:match "^_" then
  256     local result = Variable {
  128       [Name] = key:match "^_(.*)$",
  128       [Sort] = sort,
          }
  128     rawset (sort, key, result)
  128     return result
        end
      end

   20 function Sort.__newindex (sort, key, t)
  328   if type (t) == "table" then
  632     Fun.frommap (t):each (function (k, s)
  348       assert (getmetatable (s) == Sort, tostring (k) .. " must be a sort")
          end)
  632     local result = setmetatable ({
  316       [Name] = key,
  316       [Sort] = sort,
  316     }, Operation)
  632     Fun.frommap (t):each (function (k, v)
  348       result [k] = v
          end)
  316     rawset (sort, key, result)
        else
   12     rawset (sort, key, t)
        end
      end

   20 function Operation.__eq (lhs, rhs)
   72   return Fun.frommap (lhs)
   77          : all (function (k, v) return rhs [k] == v end)
   36      and Fun.frommap (rhs)
   36          : all (function (k, v) return lhs [k] == v end)
      end

   20 function Operation.__tostring (operation)
   16   local t = Fun.frommap (operation)
   20           : filter  (function (k, _   ) return type (k) ~= "table" end)
   12           : map     (function (k, sort) return tostring (k) .. ": " .. tostring (sort) end)
    4           : totable ()
    4   return tostring (operation [Name])
    4       .. (#t == 0 and "" or " { " .. table.concat (t, ", ") .. " }")
            .. ": "
    4       .. tostring (operation [Sort])
      end

   20 function Operation.__call (operation, t)
 5840   local result = setmetatable ({
 2920     [Operation] = operation,
 2920     [Name     ] = operation [Name],
 2920     [Sort     ] = operation [Sort],
 2920   }, Term)
 5840   Fun.frommap (t):each (function (k, v)
 5002     assert (operation [k],
 2501             tostring (k) .. " must be a field of " .. tostring (operation [Name]))
 4974     assert (getmetatable (v) == Term or getmetatable (v) == Variable,
 2487             tostring (k) .. " must be a term or a variable")
 2486     if getmetatable (v) == Term then
 2432       assert (v [Sort] == operation [k],
 2432               tostring (k) .. " must be of sort " .. tostring (operation [k]))
 1270     elseif getmetatable (v) == Variable then
 2540       assert (v [Sort] == operation [k],
 1270               tostring (k) .. " must be of sort " .. tostring (operation [k]))
          end
 2486     result [k] = v
        end)
 2905   return result
      end

      -- ## Term

   20 Term.__index = Term

   20 function Term.__tostring (term)
  128   local t = Fun.frommap (term)
  136           : filter  (function (k, _) return type (k) ~= "table" end)
   40           : map     (function (k, t) return tostring (k) .. " = " .. tostring (t) end)
   32           : totable ()
   32   return tostring (term [Name])
   32       .. (#t == 0 and "" or " { " .. table.concat (t, ", ") .. " }")
   32       .. ": " .. tostring (term [Sort])
      end

   20 function Term.__eq (lhs, rhs)
  192   if getmetatable (lhs) ~= getmetatable (rhs) then
    4     return false
        end
  376   assert (getmetatable (lhs) == Term,
  188           "lhs must be a term or a variable")
  376   assert (getmetatable (rhs) == Term,
  188           "rhs must be a term or a variable")
  376   return Fun.frommap (lhs)
  762          : all (function (k, v) return rhs [k] == v end)
  348      and Fun.frommap (rhs)
  880          : all (function (k, v) return lhs [k] == v end)
      end

   20 function Term.equivalence (lhs, rhs)
  372   assert (getmetatable (lhs) == Term or getmetatable (lhs) == Variable,
  186           "lhs must be a term or a variable")
  372   assert (getmetatable (rhs) == Term or getmetatable (rhs) == Variable,
  186           "rhs must be a term or a variable")
  186   if lhs [Sort] ~= rhs [Sort] then
    8     return nil
        end
  178   local variables = {}
        local function compare (l, r)
          local result
  410     if  getmetatable (l) == Variable
   84     and getmetatable (r) == Variable then
   48       if (variables [l] and variables [l] ~= r)
   44       or (variables [r] and variables [r] ~= l) then
    8         result = false
            else
   40         variables [l] = r
   40         variables [r] = l
   40         result = true
            end
  362     elseif getmetatable (l) == Variable
   36        and getmetatable (r) == Term then
   36       if variables [l] and variables [l] ~= r then
    4         result = false
            else
   32         variables [l] = r
   32         result = true
            end
  326     elseif getmetatable (l) == Term
  326        and getmetatable (r) == Variable then
   68       if variables [r] and variables [r] ~= l then
    4         result = false
            else
   64         variables [r] = l
   64         result = true
            end
  258     elseif getmetatable (l) == Term
  258        and getmetatable (r) == Term then
  258       if l [Operation] == r [Operation] then
  726         result = Fun.frommap (l [Operation])
  970           : filter (function (k) return type (k) ~= "table" end)
  716           : all (function (k) return compare (l [k], r [k]) end)
            else
   16         result = false
            end
          end
  410     return result
        end
  178   return compare (lhs, rhs), variables
      end

   20 function Term.__div (term, mapping)
  128   assert (getmetatable (term) == Term or getmetatable (term) == Variable,
   64           "term must be a term or a variable")
   64   assert (type (mapping) == "table")
  128   Fun.frommap (mapping):each (function (k, v)
  132     assert (getmetatable (k) == Variable,
   66             tostring (k) .. " must be a variable")
  132     assert (getmetatable (v) == Variable or getmetatable (v) == Term,
   66             tostring (k) .. " must be a term or a variable")
        end)
        local function rename (t)
  180     if getmetatable (t) == Variable then
   78       return mapping [t] or t
          else
  408       return t [Operation] (Fun.frommap (t)
  524         : filter  (function (k, _) return type (k) ~= "table" end)
  218         : map     (function (k, v) return k, rename (v) end)
  102         : tomap ())
          end
        end
   64   return rename (term)
      end

   20 Variable.__div = Term.__div

      -- ## Axiom

   20 getmetatable (Axiom).__call = function (_, t)
 1232   assert (type (t) == "table",
  616           "Axiom takes a table as parameter")
 1232   assert (t.when == nil or getmetatable (t.when) == Term,
  616           "when must be a Boolean term")
 1232   assert (#t == 2,
  616           "axiom must be between two terms")
  616   local result = setmetatable ({}, Axiom)
 1232   Fun.frommap (t):each (function (k, v)
 1244     if type (k) == "number" then
 2464       assert (getmetatable (v) == Term or getmetatable (v) == Variable,
 1232               tostring (k) .. " must be a term or a variable")
          end
 1244     result [k] = v
        end)
  616   return result
      end

   20 function Axiom.__tostring (axiom)
   12   local t = Fun.fromtable (axiom)
   12           : map (function (x) return tostring (x) end)
    4           : totable ()
    4   return table.concat (t, " = ")
    4       .. (axiom.when and " when " .. tostring (axiom.when) or "")
      end

   20 function Axiom.__eq (lhs, rhs)
   16   return Fun.frommap (lhs)
   24          : all (function (k, v) return rhs [k] == v end)
    8      and Fun.frommap (rhs)
    8          : all (function (k, v) return lhs [k] == v end)
      end

      -- # Adt

   20 return {
   20   name      = Name,
   20   generator = Generator,
   20   axioms    = Axioms,
   20   Sort      = Sort,
   20   Variable  = Variable,
   20   Operation = Operation,
   20   Term      = Term,
   20   Axiom     = Axiom,
  612   axiom     = function (...) return getmetatable (Axiom).__call (Axiom, ...) end,
   20 }

==============================================================================
./src/adt/natural.lua
==============================================================================
   12 local Fun     = require "fun"
   12 local Adt     = require "adt"
   12 local Boolean = require "adt.boolean"
   12 local Natural = Adt.Sort "Natural"

   12 Natural.Zero        = {}
   12 Natural.Successor   = { Natural }
   12 Natural.Increment   = { Natural }
   12 Natural.Decrement   = { Natural }
   12 Natural.Addition    = { Natural, Natural }
   12 Natural.Subtraction = { Natural, Natural }
   12 Boolean.Is_even     = { Natural }

   12 Natural.generators { Natural.Zero, Natural.Successor }

   12 function Natural.nth (n)
    8   return Fun.range (1, n)
   16        : reduce (function (i) return Natural.Successor { i } end, Natural.Zero {})
      end

      -- Increment
   24 Natural [Adt.axioms].increment = Adt.axiom {
   12   Natural.Increment { Natural._v },
   12   Natural.Successor { Natural._v },
   24 }

      -- Decrement
   24 Natural [Adt.axioms].decrement = Adt.axiom {
   12   Natural.Decrement { Natural.Successor { Natural._v } },
        Natural._v,
   24 }

      -- Addition

   24 Natural [Adt.axioms].addition_zero = Adt.axiom {
   12   Natural.Addition { Natural._x, Natural.Zero {} },
        Natural._x,
   24 }

   24 Natural [Adt.axioms].addition_nonzero = Adt.axiom {
   12   Natural.Addition  { Natural._x, Natural.Successor { Natural._y } },
   12   Natural.Successor { Natural.Addition { Natural._x, Natural._y } },
   24 }
   24 Natural [Adt.axioms].subtraction_zero = Adt.axiom {
   12   Natural.Subtraction { Natural._x, Natural.Zero {} },
        Natural._x
   24 }
   24 Natural [Adt.axioms].subtraction_nonzero = Adt.axiom {
   12   Natural.Subtraction { Natural._x, Natural.Decrement { Natural._y } },
   12   Natural.Decrement { Natural.Subtraction { Natural._x, Natural._y } }
   24 }
   24 Boolean [Adt.axioms].is_even_zero = Adt.axiom {
   12   Boolean.Is_even { Natural.Zero {} },
   12   Boolean.True {}
   24 }
   24 Boolean [Adt.axioms].is_even_nonzero = Adt.axiom {
   12   Boolean.Is_even { Natural._x },
   12   Boolean.Not { Boolean.Is_even { Natural.Decrement { Natural._x } } }
   24 }

      -- Substraction
   24 Natural [Adt.axioms].v_substraction_zero = Adt.axiom {
   12   Natural.Subtraction { Natural._v, Natural.Zero {} },
        Natural._v,
   24 }

   24 Natural [Adt.axioms].sx_substraction_sy = Adt.axiom {
   24   Natural.Subtraction { Natural.Successor { Natural._x },
   12                         Natural.Successor { Natural._y } },
   12   Natural.Subtraction { Natural._x, Natural._y },
   24 }

      -- Is_even
   24 Natural [Adt.axioms].is_even_zero = Adt.axiom {
   12   Boolean.Is_even { Natural.Zero {} },
   12   Boolean.True {},
   24 }

   24 Natural [Adt.axioms].is_even_sv = Adt.axiom {
   12   Boolean.Is_even { Natural.Successor { Natural._v } },
   12   Boolean.Not { Boolean.Is_even { Natural._v } },
   24 }

   12 return Natural

==============================================================================
./src/adt/theorem.lua
==============================================================================
    8 local Fun     = require "fun"
    8 local Hashids = require "hashids"
    8 local Adt     = require "adt"
    8 local Boolean = require "adt.boolean"

    8 local hash = Hashids.new ("modeling & verification", 4)

    8 local Theorem    = setmetatable ({}, { __tostring = function () return "Theorem"    end })
    8 local Conjecture = setmetatable ({}, { __tostring = function () return "Conjecture" end })

    8 Theorem.Conjecture = Conjecture

    8 local Variables = setmetatable ({}, { __mode = "v" })

      local function simplify (term)
   56   assert (getmetatable (term) == Adt.Term,
   28           "parameter must be a term")
   56   assert (term [Adt.Sort] == Boolean,
   28           "parameter must be a Boolean")
   28   if term == Boolean.True {} then
   20     return nil
        else
    8     return term
        end
      end

      local function rename (term, variables)
  750   if getmetatable (term) == Adt.Variable then
  228     if not variables [term] then
  196       variables [term] = Adt.Variable {
   98         [Adt.Sort] = term [Adt.Sort],
   98         [Adt.name] = hash:encode (#Variables+1)
   98       }
   98       Variables [#Variables+1] = variables [term]
          end
  228     return variables [term]
        else
 2088     return term [Adt.Operation] (Fun.frommap (term)
 2498       : filter  (function (k, _) return type (k) ~= "table" end)
  932       : map     (function (k, t) return k, rename (t, variables) end)
  522       : tomap   ())
        end
      end

      local function all_variables (x, variables)
  752   variables = variables or {}
  752   if getmetatable (x) == Adt.Axiom
  724   or getmetatable (x) == Theorem
  668   or getmetatable (x) == Conjecture then
  182     Fun.frommap (x.variables or {}):each (function (k, v)
   49       variables [k] = v
          end)
   91     all_variables (x.when, variables)
   91     all_variables (x [1] , variables)
   91     all_variables (x [2] , variables)
  661   elseif getmetatable (x) == Adt.Variable then
  238     variables [x] = x
  423   elseif getmetatable (x) == Adt.Term then
 1008     Fun.frommap (x)
 1704       : filter (function (k, _) return type (k) ~= "table" end)
  696       : each   (function (_, t) all_variables (t, variables) end)
        end
  752   return variables
      end

    8 getmetatable (Theorem).__call = function (_, t)
  308   assert (type (t) == "table",
  154           "Theorem takes a table as parameter")
  308   assert ( t.when == nil
  154         or (getmetatable (t.when) == Adt.Term and t.when [Adt.Sort] == Boolean),
  154           "when must be a Boolean term")
  308   assert (#t == 2,
  154           "theorem must be between two terms")
  308   assert (getmetatable (t [1]) == Adt.Term or getmetatable (t [1]) == Adt.Variable,
  154           "lhs must be a term or a variable")
  308   assert (getmetatable (t [2]) == Adt.Term or getmetatable (t [2]) == Adt.Variable,
  154           "rhs must be a term or a variable")
  154   local variables = {}
  154   local when      = t.when and simplify (t.when)
  308   local result    = setmetatable ({
  154     variables = {},
  154     when = when and rename (when, variables),
  154     [1]  = rename (t [1], variables),
  154     [2]  = rename (t [2], variables),
  154   }, Theorem)
  275   for k, v in pairs (t.variables or {}) do
  121     result.variables [k] = variables [v]
        end
  154   return result
      end

    8 getmetatable (Conjecture).__call = function (_, t)
   24   assert (type (t) == "table",
   12           "Conjecture takes a table as parameter")
   24   assert ( t.when == nil
   12         or (getmetatable (t.when) == Adt.Term and t.when [Adt.Sort] == Boolean),
   12           "when must be a Boolean term")
   24   assert (#t == 2,
   12           "conjecture must be between two terms")
   24   assert (getmetatable (t [1]) == Adt.Term or getmetatable (t [1]) == Adt.Variable,
   12           "lhs must be a term or a variable")
   24   assert (getmetatable (t [2]) == Adt.Term or getmetatable (t [2]) == Adt.Variable,
   12           "rhs must be a term or a variable")
   12   local when      = t.when and simplify (t.when)
   12   local variables = {}
   12   if when then
****0     all_variables (when, variables)
        end
   12   all_variables (t [1], variables)
   12   all_variables (t [2], variables)
   24   local result    = setmetatable ({
   12     variables = variables,
   12     when = when and rename (when, variables),
   12     [1]  = rename (t [1], variables),
   12     [2]  = rename (t [2], variables),
   12   }, Conjecture)
   12   return result
      end

    8 function Theorem.__tostring (axiom)
   12   local t = Fun.fromtable (axiom)
   12           : map (function (x) return tostring (x) end)
    4           : totable ()
    4   return table.concat (t, " = ")
    4       .. (axiom.when and " when " .. tostring (axiom.when) or "")
      end

    8 function Theorem.__eq (lhs, rhs)
   32   return Adt.Term.equivalence (lhs [1] , rhs [1] )
   32      and Adt.Term.equivalence (lhs [2] , rhs [2] )
   32      and (lhs.when and rhs.when and Adt.Term.equivalence (lhs.when, rhs.when)
   32           or lhs.when == rhs.when)
      end

    8 function Theorem.conjecture (conjecture)
   14   assert (getmetatable (conjecture) == Conjecture,
    7           "parameter must be an conjecture")
   14   return Theorem {
    7     variables = all_variables (conjecture),
    7     when = conjecture.when,
    7     [1]  = conjecture [1],
    7     [2]  = conjecture [2],
        }
      end

    8 function Theorem.axiom (axiom)
   56   assert (getmetatable (axiom) == Adt.Axiom,
   28           "parameter must be an axiom")
   56   return Theorem {
   28     variables = all_variables (axiom),
   28     when = axiom.when,
   28     [1]  = axiom [1],
   28     [2]  = axiom [2],
        }
      end

    8 function Theorem.reflexivity (term)
    8   assert (getmetatable (term) == Adt.Term or getmetatable (term) == Adt.Variable,
    4           "parameter must be a term or a variable")
    8   return Theorem {
    4     variables = all_variables (term),
    4     [1] = term,
    4     [2] = term,
        }
      end

    8 function Theorem.symmetry (theorem)
    8   assert (getmetatable (theorem) == Theorem,
    4           "parameter must be a theorem")
    8   return Theorem {
    4     variables = all_variables (theorem),
    4     when = theorem.when,
    4     [1]  = theorem [2],
    4     [2]  = theorem [1],
        }
      end

    8 function Theorem.transitivity (lhs, rhs)
   12   assert (getmetatable (lhs) == Theorem,
    6           "lhs must be a theorem")
   12   assert (getmetatable (rhs) == Theorem,
    6           "rhs must be a theorem")
    6   local ok, variables = Adt.Term.equivalence (lhs [2], rhs [1])
    6   if ok then
          local when
    6     if lhs.when and rhs.when then
****0       when = Boolean.And {
****0         lhs.when,
****0         rhs.when / variables,
            }
    6     elseif lhs.when then
****0       when = lhs.when
    6     elseif rhs.when then
****0       when = rhs.when / variables
          end
   12     local result = Theorem {
    6       variables = all_variables (lhs),
    6       when = when,
    6       [1]  = lhs [1],
    6       [2]  = rhs [2] / variables,
          }
    6     return result
        else
****0     return nil, "lhs [2] ~= rhs [1]"
        end
      end

    8 function Theorem.substitutivity (operation, operands)
   30   assert (getmetatable (operation) == Adt.Operation,
   15           "operation must be an operation")
   30   assert (type (operands) == "table",
   15           "operands must be a table")
   30   Fun.frommap (operands)
   15     : each (function (k, v)
   30               assert (getmetatable (v) == Theorem,
   15                       tostring (k) .. " must be a theorem")
                  end)
        -- TODO
   15   local variables = {}
   30   Fun.frommap (operands)
   30     : each (function (_,v) all_variables (v, variables) end)
   15   local  lhs = operands [1][1]
   15   local  rhs = operands [1][2]
   15   local when = lhs.when and rhs.when
   15   return Theorem {
   15     variables = variables,
   15     when = when,
   15     [1]  = operation (lhs),
          [2]  = operation (rhs),
        }
      end

    8 function Theorem.substitution (theorem, variable, replacement)
   54   assert (getmetatable (theorem) == Theorem,
   27           "theorem must be a theorem")
   54   assert (getmetatable (variable) == Adt.Variable,
   27           "variable must be a variable")
   54   assert (getmetatable (replacement) == Adt.Term or getmetatable (replacement) == Adt.Variable,
   27           "replacement must be a term or a variable")
   54   assert (variable [Adt.Sort] == replacement [Adt.Sort],
   27           "variable and replacement must be of the same sort")
        -- TODO
   27   local lhs = theorem [1]
   27   local rhs = theorem [2]
   27   local mapping = {}
   27   mapping [variable] = replacement
   27   lhs = lhs / mapping
   27   rhs = rhs / mapping
   27   local when = lhs.when and rhs.when
   54   return Theorem {
   27     variables = all_variables (theorem),
   27     when = when,
   27     [1]  = lhs,
   27     [2]  = rhs,
        }
      end

    8 function Theorem.cut (theorem, replacement)
    8   assert (getmetatable (theorem) == Theorem,
    4           "theorem must be a term")
    8   assert (getmetatable (replacement) == Theorem,
    4           "replacement must be a theorem")
        -- TODO
    4   if not theorem.when then
****0     return nil
        end
    8   local search = Boolean.Equals {
    4     replacement [1],
          replacement [2]
    4   }
    4   local replaced = false
        local function replace(term)
    4     if getmetatable (term) == Adt.Variable then
****0       return term
          end
    4     local ok, map = Adt.Term.equivalence (term, search)
    4     if ok then
    4       replaced = true
            return replacement.when
    4          and replacement.when / map
    4           or Boolean.True {}
          else
****0       return term [Adt.Operation] (Fun.frommap (term)
****0         : filter (function (k, _) return type (k) ~= "table" end)
****0         : map    (function (k, t) return k, replace (t) end)
****0         : tomap  ())
          end
        end
    4   local result = replace (theorem.when)
    4   if not replaced then
****0     return nil
        end
    8   return Theorem {
    4     variables = all_variables (theorem),
    4     when = result,
    4     [1] = theorem [1],
    4     [2] = theorem [2],
        }
      end

    8 function Theorem.inductive (conjecture, variable, t)
   14   assert (getmetatable (conjecture) == Conjecture,
    7           "conjecture must be a conjecture")
   14   assert (getmetatable (variable) == Adt.Variable,
    7           "variable must be a variable")
    7   assert (type (t) == "table")
   14   local generators = Fun.frommap (variable [Adt.Sort])
  143     : filter (function (_, v) return getmetatable (v) == Adt.Operation and v [Adt.generator] end)
    7   local result  = Theorem.conjecture (conjecture)
    7   local missing = {}
   28   generators:filter (function (key)
   14     return type (t [key]) ~= "function"
   35   end):map (function (k) return tostring (k) end):totable ()
    7   if #missing ~= 0 then
****0     return nil, table.concat (missing, ", ")
        end
   14   if generators:all (function (_, operation)
   11     local var       = result.variables [variable]
   44     local operands  = Fun.frommap (operation)
   51       : filter (function (k) return type (k) ~= "table" end)
   18       : map    (function (k) return k, var end)
   11       : tomap  ()
   11     local successor = Theorem.substitution (result, var, operation (operands))
   11     local proved    = t [operation] (result)
    4     return getmetatable (proved) == Theorem
    4        and proved == successor
    7   end) then
****0     return result
        else
****0     return nil
        end
      end

    8 return Theorem

==============================================================================
Summary
==============================================================================

File                  Hits Missed Coverage
------------------------------------------
./src/adt/boolean.lua 120  0      100.00%
./src/adt/init.lua    200  0      100.00%
./src/adt/natural.lua 61   0      100.00%
./src/adt/theorem.lua 238  17     93.33%
------------------------------------------
Total                 619  17     97.33%
